mystery_string_1 = "Grapes"
mystery_string_2 = "apples"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Remember, greater than and less than operators can be used to
#compare strings. A string is "less than" another string if it
#comes earlier when sorted alphabetically.
#
#This can have some nuances, though, when it comes to
#capitalization, punctuation, and spaces.
#
#Write some code below that will print True if mystery_string_1
#comes before mystery_string_2 alphabetically according to
#Python, and False if it does not.



#
#While this might be a simple line of code, we'd strongly
#recommend checking out the submission results to see some of
#the odd ways that Python performs. For example, don't be
#surprised when your code says that it's True that "Grapes"
#comes before "apples" alphabetically: Python puts all
#upper-case letters before all lower-case letters.


#Write your code here!
print(mystery_string_2 > mystery_string_1)

======================================================= 2

mystery_string = "Hello, world!"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The 'in' operator can be used to see if a string of characters
#is found within another string of characters, just like it can
#be used to find if an item is in a list.
#
#Above we've created a string with the variable name
#mystery_string. Write some code below that will print True
#if the string "world" appears within mystery_string, and
#False if it does not.



#Write your code here!

print("world" in mystery_string)


======================================================= 3

balance = 20.0
price = 19.0

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine we're writing some software for a cash register or
#credit card processor. We want to approve a purchase if the
#customer's balance is greater than or equal to the purchase
#price, and reject it otherwise.
#
#Write some code below that will print True if balance is
#greater than or equal to price, and False if it is not.


#Add your code here!
print(balance >= price)


=======================================================  4

balance = 20.0
price = 29.0
overdraft_protection = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Last exercise, we printed True if balance was greater than or
#equal to price, and False otherwise. However, some banks have
#something called overdraft protection. Overdraft protection
#means that the customer is allowed to spend more than their
#balance, and the bank just expects them to deposit the money
#to cover the purchase later.
#
#Write some code below that will print True if the customer
#can make the purchase given their balance, the purchase
#price, and whether or not they have overdraft protection.
#Specifically, the result should be True if balance is greater
#than or equal to price or if overdraft_protection is True,
#and False if neither of these are true.



#Add your code here!
print( (balance >= price) or overdraft_protection )


======================================================  5

hot = False
cold = True
rainy = True
windy = False
snowy = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine you're writing a clothing-recommendation app that
#makes suggestions based on the weather. It has booleans
#representing five different kinds of weather: hot, cold,
#rainy, windy, snowy.
#
#The app recommends four kinds of clothing:
#
# - a jacket, if it's either cold or windy.
# - boots, if it's cold and snowy.
# - flip flops, if it's hot, unless it's rainy.
# - a t-shirt, if it's hot, unless it's rainy or windy.
#
#Write some code below that will print four lines, one for
#each of the four types of clothing. Under the original
#values for the variables above, the lines should look
#like this:
#
#Jacket: False
#Boots: False
#Flip-Flops: False
#T-shirt: False


#
#The values (True and False) will differ based on the
#values assigned to hot, cold, windy, snowy, and rainy
#at the start of the program.
#
#Hint: To print these lines, you'll need to add the
#result of the expression to a string of the clothing item.
#To do that, we'll need to convert the boolean from the
#expression into a string.


#Add your code here!

#We tested your code with hot = False, windy = False, rainy = True, cold = True, snowy = True. We expected your code to print this:

#Jacket: True
#Boots: True
#Flip-Flops: False
#T-shirt: False


print("Jacket: ", cold or windy)
print("Boots: ", cold and snowy)
print("Flip-Flops: ", hot or not rainy or not cold)
print("T-shirt: ",(not rainy or not windy) and hot)


=========================================================== 6
cold = False
windy = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In this problem, we want to print the message, "You should
#wear a jacket today!" if it's cold or windy, or the message
#"You don't need a jacket today!" if it's not.
#
#At the bottom of this file, we've added some code that
#handles printing these two messages. For this code to work,
#the variable need_jacket needs to exist. Its value should be
#True (the boolean, not the string) if it's cold or windy,
#False if it's neither cold nor windy.


#Add your code to create the variable need_jacket with the
#appropriate value here!


#Do not modify the code below. It will work if you have
#correctly create the variable need_jacket with the
#appropriate value.
need_jacket = (cold or windy)

if need_jacket:
        print("You should wear a jacket today!")
else:
    print("You don't need a jacket today!")

========================================================  7

busy = True
hungry = False
tired = True
stressed = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Logical operators get more complex when we start using them
#with the results of other logical operators. So, let's try
#it out!
#
#Using the variables above, we want to assess whether the
#person is happy, sad, bored, confused, or anxious.
#
# - The person is happy if they're busy but not stressed.
# - The person is sad if they're either hungry or tired.
# - The person is confused if they're both happy and sad.
# - The person is bored if they're neither happy, sad,
#   nor busy.
# - The person is anxious if they're neither happy nor sad,
#   but they are stressed.
#
#Add code below whose output will list whether each of these
#emotions is true or false. For example, with the original
#values of the variables above, this would print:
#
#Happy: True
#Sad: True
#Confused: True
#Bored: False
#Anxious: False



#Add your code here!
print("Happy: ", busy and not stressed)
print("Sad: ", hungry or tired)
print("Confused: ", (busy and not stressed) and (hungry or tired))
print("Bored: ", not((busy and not stressed) and (hungry or tired) and busy))
print("Anxious: ",stressed and not (busy and not stressed) and not (hungry or tired))



================================================================ 8
can_afford = True
destination_is_safe = True
educational_value = True
relatives_nearby = True
is_international = True
have_passport = True
afraid_to_fly = True
have_a_car = True
is_a_beach = True
is_warm = False
has_skiing = True
is_a_city = True
is_off_peak = True
has_attraction = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Imagine for a moment that you're a college student who wants
#to travel during spring break. You have a destination in
#mind. What determines whether you can go there?
#
#First, how would you pay for the trip? If you can afford it
#(can_afford), then all you need is for your parents to agree
#to let you go. Your parents will agree to let you go if the
#destination is safe (destination_is_safe). 
#
#If you can't afford it, then you need your parents to pay for
#the trip. Your parents will pay for the trip if the destination
#is safe (destination_is_safe) and if either there is educational
#value (educational_value) or there are relatives nearby for
#you to visit (relatives_nearby).
#
#Second, are you sure you're able to go to this location? If
#it's international (is_international), then you'll need a
#passport (have_passport) and you can't be afraid to fly
#(afraid_to_fly). If it's not international (is_international),
#then you either must have a car (have_a_car) or you can't be
#afraid to fly (afraid_to_fly).
#
#Third, do you actually want to go to this location? If it's a
#beach location (is_a_beach), then you want the weather to be
#warm (is_warm). If it's instead a skiing location (has_skiing),
#you don't want it to be warm (is_warm). If it's a tourist city
#(is_a_city), then you either want it to be an off-peak travel
#time (is_off_peak) or you want there to be an attraction in
#town that week (has_attraction).
#
#If it's both a beach and a city, then you'd decide to go if it
#meets the condition for the beach (it's warm) or for a city
#(is an off-peak time or has an attraction). If it's both a
#skiing location and a city, then you'd decide to go if it meets
#either type of location's conditions as well.
#
#Your only goal here is to print True or False: True if the
#destination represented by the variables is an acceptable
#travel location, False if it is not.
#
#HINT: Don't try to do this all in one line. Break it into
#smaller parts.


#Add your code here!

============================================= Problem set 2

dividend = 7
divisor = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#The variables above create a dividend and a divisor. Add
#some code below that will print the quotient and remainder
#of performing this operation. The quotient should be the
#whole number, not the decimal number: for example, with the
#original values of dividend and divisor (7 and 3), your code
#should print 2, then 1: 3 goes into 7 two whole times, with
#one left over.
#
#Print the quotient and remainder each on their own line.
#Both values should be integers: there should be no decimals.


#Add your code here!
print(dividend ** divisor)
print(dividend % divisor)

============================================   2
amount = 67

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Write a program that will print out the coins needed to
#arrive at the amount shown above. Assume that we always want
#the maximum number of large coins: for example, for 67 cents,
#we want 2 quarters, 1 dime, 1 nickel, and 2 pennies instead
#of 6 dimes and 7 pennies.
#
#If you are unfamiliar with American currency: a quarter is
#worth 25 cents; a dime is worth 10 cents; a nickel is worth
#5 cents; a penny is worth 1 cent.
#
#To make things easier, we've gone ahead and supplied your
#print statements. All you need to do is create four variables:
#quarters, dimes, nickels, and pennies.
#
#HINT: Change the value of amount as you go to reflect what
#coins you've already found.


#Add your code here!



#If your code above is correct, the following lines will
#initially print (for amount = 67):
#Quarters: 2
#Dimes: 1
#Nickels: 1
#Pennies: 2
print("Quarters:", quarters)
print("Dimes:", dimes)
print("Nickels:", nickels)
print("Pennies:", pennies)

============================================    3
meal_cost = 10.00
tax_rate = 0.08
tip_rate = 0.20

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#When eating at a restaurant in the United States, it's
#customary to have two percentage-based surcharges added on
#top of your bill: sales tax and tip. These percentages are
#both applies to the original cost of the meal. For example,
#a 10.00 meal with 8% sales tax and 20% tip would add 0.80
#for tax (0.08 * 10.00) and 2.00 for tip (0.20 * 10.00).
#
#The variables above create the cost of a meal and identify
#what percentage should be charged for tax and tip.
#
#Add some code below that will print the "receipt" for a
#meal purchase. The receipt should look like this:
#
#Subtotal: 10.00
#Tax: 0.8
#Tip: 2.0
#Total: 12.8
#
#Subtotal is the original value of meal_cost, tax is the
#tax rate times the meal cost, tip is the tip rate times
#the meal cost, and total is the sum of all three numbers.
#Don't worry about the number of decimal places; it's fine
#if your code leaves off some numbers (like 0.8 for tax) or
#includes too many decimal places (like 2.121212121 for tip).


#Add your code here!

======================================================  4
STAB = 1
Type = 0.25
Critical = 2
Other = 1
Random = 1
Level = 50
Attack = 125
Defense = 110
Base = 60

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In the Pokemon game franchise, damage is calculated using this formula:
#https://studio.edx.org/asset-v1:GTx+CS1301+1T2017+type@asset+block@DamageCalc.png
#
#In that formula, the variable Modifier is calculated using this formula:
#https://studio.edx.org/asset-v1:GTx+CS1301+1T2017+type@asset+block@ModifierCalc.png
#
#Add code below such that the program prints the total damage
#caused based on the STAB, Type, Critical, Other, Random,
#Level, Attack, Defense, and Base given above.
#
#Hint: Don't try to do all these calculations at once! Break
#the complicated formual down into bite-sized little chunks.


#Add your code here!

================================================= 5
principal = 5000
rate = 0.05
time = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#One important formula in finance and accounting is the
#formula for continually compounding interest. This formula
#takes as input an amount of money invested, an interest
#rate, and an amount of time (in years), and returns the
#value of the investment after that period of time.
#
#The formula is:
#
#   amount = principal * e ^ (rate * time)
#
#Add some code below that will find the amount of money in
#an account with the initial investment, interest rate, and
#number of years given by the variables above. Note,
#however, that we've gone ahead and supplied you the print
#statement: you shouldn't need to change this. Instead, just
#complete this code such that the variable 'amount' is
#created with the right value.
#
#Note that e is a constant; you may access it with math.e --
#you can use math.e as a variable like any other after
#importing math:

import math

#Add your code here such that there exists a variable named
#'amount' with the amount in the account after the given
#time at the given interest rate.


#Don't touch the line of code below!
print("After " + str(time) + " years invested with a " + str(rate) + " interest rate, a $" + str(principal) + " investment will be worth $" + str(round(amount, 2)) + ".")


================================================================ 6
start_hour = 3
start_minute = 48
length = 172

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Let's try something trickier! The variables above represent
#the start time for a run as well as the length of the run
#in minutes. The original values, for example, show a run
#that started at 3:48 and lasted 172 minutes.
#
#Add some code below that will print the time at which the
#run will end, using normal formatting (e.g. 6:40 for the
#original data above). To do this, you'll need to somehow
#find both the hours and minutes of the new time, convert
#both to strings, and add those to the colon ":" to print
#the time.
#
#You may assume that the length of the run will never cross
#12:59 (e.g. you don't have to worry about going from
#12:59 to 1:00 or 23:59 to 0:00). You also don't need to
#worry about the lack of 0 in front of single-digit minute
#counts (e.g. it's fine to show 5:07 as 5:7).


#Add your code here!

======================================================= 7
dosage = 100
time_since_last_dose = 7
is_nighttime = False
took_something_cross_reactive = False

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Let's try to use our mathematical operators and logical
#operators together.
#
#Imagine you've been battling a cold. You're deciding whether
#to take cough syrup or not, and if so, how much to take.
#
#time_since_last_dose represents the number of hours since
#you last took some cough syrup. For every hour it's been,
#you're allowed to have one dose.
#
#If it's nighttime (is_nighttime), then you may double
#your dose since you won't be taking any until morning.
#
#However, if you've taken something cross-reactive
#(took_something_cross_reactive), then you should not take
#any cough syrup.
#
#Write a program that will print how large a dose of cough
#syrup to take.
#
#HINT: Remember, if you try to multiply a number times a
#boolean, Python treats False as 0 and True as 1. There are
#other ways to do this, though.


#Add your code here!

================================================ 8
mystery_value_1 = 6
mystery_value_2 = 3

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#Print a sentence describing the values you get when you add,
#subtract, multiply, and divide the numbers above. The
#sentence should look like this:
#
#The sum is 9, the difference is 3, the product is 18, and the
#quotient is 2.0.
#
#Make sure to include all commas, spaces, and periods exactly
#as shown -- the only thing that should change based on the
#values of the variables is the numbers.


#Add your code here!















